// (1) queryDSL 추가
buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
}

group = 'm22t.ansdlsrb'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.querydsl:querydsl-jpa'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	// 1. 스프링 시큐리티 사용하기 위한 스타터 추가
	implementation 'org.springframework.boot:spring-boot-starter-security'
	// 2. 타임리프에서 스프링 시큐리티를 사용하기 위한 의존성 추가
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	// 3. 스프링 시큐리티를 테스트 하기 위한 의존성 추가
	implementation 'org.springframework.security:spring-security-test'


}

tasks.named('test') {
	useJUnitPlatform()

	def webappDir = "$projectDir/src/main/HACKERTON_FRONT"

	sourceSets {
		main {
			resources {
				srcDirs = ["$webappDir/build", "$projectDir/src/main/resources"]
			}
		}
	}

	processResources {
		dependsOn "buildReact"
	}

	task buildReact(type: Exec) {
		dependsOn "installReact"
		workingDir "$webappDir"
		inputs.dir "$webappDir"
		group = BasePlugin.BUILD_GROUP
		if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
			commandLine "npm.cmd", "run-script", "build"
		} else {
			commandLine "npm", "run-script", "build"
		}
	}

	task installReact(type: Exec) {
		workingDir "$webappDir"
		inputs.dir "$webappDir"
		group = BasePlugin.BUILD_GROUP
		if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
			commandLine "npm.cmd", "audit", "fix"
			commandLine 'npm.cmd', 'install'
		} else {
			commandLine "npm", "audit", "fix"
			commandLine 'npm', 'install'
		}
	}
}

tasks {
	processResources {
		duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.INCLUDE
	}
}
